{"pageProps":{"post":{"attributes":{},"html":"<p>If an error is not caught on our server, it will crash and our API will non functional.\nTo avoid this, we want to make sure we catch any and all potential errors. We also want to do right by the requester and inform them on any errors, especially if it&#39;s their fault. Express uses its middleware system to ship a default error handler that does a good job at catching any syncronous errors that throw inside middleware and handlers. Let&#39;s test that:</p>\n<pre><code class=\"hljs language-ts\">app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;oops&quot;</span>);\n});\n</code></pre>\n<p>If you were to run this, you will see an error in your terminal, however, the server will not crash. Express is adding a default error handler to the bottom of our router stack. Error handling middleware is just like all middleware except they don&#39;t run before a handler, they only run after an error has been thrown.</p>\n<pre><code class=\"hljs language-ts\">app.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err, req, res, next</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// handle error</span>\n});\n</code></pre>\n<p>As long as your error handler is registered, it wull catch errors. Now, what about async errors? Well, we have to tell Express about our async errors. Inside our handlers and middleware:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> handler = <span class=\"hljs-keyword\">async</span> (req, res, next) = {\n  <span class=\"hljs-comment\">// ....</span>\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> prisma.<span class=\"hljs-property\">user</span>.<span class=\"hljs-title function_\">create</span>({})\n  } <span class=\"hljs-keyword\">catch</span>(e) {\n    <span class=\"hljs-title function_\">next</span>(e)\n  }\n}\n</code></pre>\n<p>Anything we pass to <code>next</code> is considered an error.</p>\n","slug":"error-handler","title":"Error Handler","section":"Error Handlers","icon":"times","filePath":"/home/runner/work/API-design-v4/API-design-v4/lessons/09-error-handlers/A-error-handler.md","nextSlug":"/API-design-v4/lessons/error-handlers/custom-handler","prevSlug":"/API-design-v4/lessons/route-handlers/handlers"}},"__N_SSG":true}