{"pageProps":{"post":{"attributes":{},"html":"<p>Middleware are functions that run right before your handlers run. They can do things like augment the request, log, handle errors, authenticate, and pretty much anything else. They look exactly like a handler with one difference. Because you can have a list of middleware, there needs to be a mechanism to move into the next middlware function when work is done in the current middleware. It looks like this:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">myMiddlware</span> = (<span class=\"hljs-params\">req, res, next</span>) =&gt; {\n  <span class=\"hljs-comment\">// ... do my work, and when I done call next()</span>\n  <span class=\"hljs-title function_\">next</span>();\n};\n</code></pre>\n<p>This <code>next</code> function is exactly what it sounds like. It tells Express that we&#39;re done in the middleware and it&#39;s safe to proceed to whatever is next (more middleware or a handler).\n<br>\nTo apply the middleware to a route, you can do this:</p>\n<pre><code class=\"hljs language-ts\">app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;/todo/:id&quot;</span>, myMiddleware, my2ndMiddleware, handler);\n<span class=\"hljs-comment\">// or</span>\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;/todo/:id&quot;</span>, [myMiddleware, my2ndMiddleware], handler);\n</code></pre>\n<br>\nMiddleware will run in the order in which you passed them as arguments.\n","slug":"middleware","title":"Middleware","section":"Routes and Middleware","icon":"arrows-alt","filePath":"/home/runner/work/API-design-v4/API-design-v4/lessons/06-routes-and-middleware/B-middleware.md","nextSlug":"/API-design-v4/lessons/routes-and-middleware/errata-nodemon","prevSlug":"/API-design-v4/lessons/routes-and-middleware/creating-routes"}},"__N_SSG":true}