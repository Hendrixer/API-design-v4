{"pageProps":{"post":{"attributes":{},"html":"<p>We don&#39;t want just anyone using our API. Our DB is multi-tenat, so we need to identify what user is making the request so we can scope their queries and writes to the user. We don&#39;t want one user having access to another user&#39;s data.\n<br>\nTo ensure all of this, we&#39;re going to protect our API. Tokens are a great approach for this. Things like API Keys and JWT&#39;s are good examples of tokens. You could also use Sessions. We&#39;re going to use JWTs.</p>\n<h2 id=\"creating-a-jwt\">Creating a JWT</h2>\n<p>Lets create a function that create&#39;s JWTs for when a new user signups up or current one signs in. Users will need to send the JWT on every single request to get access to the API. Our API never stores a JWT, its stored client side.\n<br></p>\n<p>We need to install a few things:</p>\n<br>\n\n<p><code>npm i jsonwebtoken bcrypt dotenv</code>\n<br></p>\n<p>Create a new file <code>src/modules/auth</code> and add this:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> jwt <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;jsonwebtoken&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">createJWT</span> = (<span class=\"hljs-params\">user</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> token = jwt.<span class=\"hljs-title function_\">sign</span>(\n    { <span class=\"hljs-attr\">id</span>: user.<span class=\"hljs-property\">id</span>, <span class=\"hljs-attr\">username</span>: user.<span class=\"hljs-property\">username</span> },\n    process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">JWT_SECRET</span>\n  );\n  <span class=\"hljs-keyword\">return</span> token;\n};\n</code></pre>\n<p>This function will take a user and create a JWT from the user&#39;s id and username. This is helpful for later when we check for a JWT, we then will know what user is making the request.\n<br>\nTo do that check, we&#39;ll create custom middleware.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">protect</span> = (<span class=\"hljs-params\">req, res, next</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> bearer = req.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">authorization</span>;\n\n  <span class=\"hljs-keyword\">if</span> (!bearer) {\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">401</span>);\n    res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">&quot;Not authorized&quot;</span>);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  <span class=\"hljs-keyword\">const</span> [, token] = bearer.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot; &quot;</span>);\n  <span class=\"hljs-keyword\">if</span> (!token) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;here&quot;</span>);\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">401</span>);\n    res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">&quot;Not authorized&quot;</span>);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> payload = jwt.<span class=\"hljs-title function_\">verify</span>(token, process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">JWT_SECRET</span>);\n    req.<span class=\"hljs-property\">user</span> = payload;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(payload);\n    <span class=\"hljs-title function_\">next</span>();\n    <span class=\"hljs-keyword\">return</span>;\n  } <span class=\"hljs-keyword\">catch</span> (e) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(e);\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">401</span>);\n    res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">&quot;Not authorized&quot;</span>);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n};\n</code></pre>\n<p>This middleware functions checks for a JWT on the <code>Authorization</code> header of a request. It then attaches the user to the request object before moving on. If anything fails, the user is sent a 401.\n<br>\nWe need to update our <code>.env</code> file to have a <code>JWT_SECRET</code>. You don&#39;t want this secret in your code because it&#39;s needed to sign and verify tokens. You can place whatever value you want. Then we need to load in the env file into our environment.\n<br>\nInside of <code>src/index.ts</code>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> dotenv <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;dotenv&quot;</span>;\ndotenv.<span class=\"hljs-title function_\">config</span>();\n</code></pre>\n<p>This will load in our env vars into the process.</p>\n<br>\nLastly, we need to add our middleware onto our API router to protect it, so inside of `src/server.ts`, import protect and add it to the chain:\n\n<pre><code class=\"hljs language-ts\">app.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-string\">&quot;/api&quot;</span>, protect, router);\n</code></pre>\n<p>Now any API call to anthing <code>/api</code> will need to have a JWT.\n<br>\nNext we&#39;ll create some routes and handlers to create users that are issued JWTs.</p>\n","slug":"auth-middleware","title":"Auth Middleware","section":"Auth","icon":"lock","filePath":"/home/runner/work/API-design-v4/API-design-v4/lessons/07-auth/A-auth-middleware.md","nextSlug":"/API-design-v4/lessons/auth/users","prevSlug":"/API-design-v4/lessons/routes-and-middleware/errata-nodemon"}},"__N_SSG":true}