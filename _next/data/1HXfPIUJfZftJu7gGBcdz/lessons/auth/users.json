{"pageProps":{"post":{"attributes":{},"html":"<p>We know from our schema that a user needs a unique username and password. Lets create a handler to create a user. Before we can do that, we&#39;ll create some helper functions to hash and compare a user&#39;s password so we&#39;re not storing it in plain text.\n<br>\nInside of <code>src/modules/auth.ts</code></p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> bcrypt <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;bcrypt&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">comparePasswords</span> = (<span class=\"hljs-params\">password, hash</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> bcrypt.<span class=\"hljs-title function_\">compare</span>(password, hash);\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">hashPassword</span> = (<span class=\"hljs-params\">password</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> bcrypt.<span class=\"hljs-title function_\">hash</span>(password, <span class=\"hljs-number\">5</span>);\n};\n</code></pre>\n<p><code>comparePasswords</code> compare a plain text password and hashed password to see if they&#39;re the same.\n<br></p>\n<p><code>hashPassword</code> hashes a password.\n<br>\nNow, let&#39;s create that handler inside <code>src/handlers/user.ts</code></p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> prisma <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../db&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { createJWT, hashPassword } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../modules/auth&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">createNewUser</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">req, res</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> hash = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">hashPassword</span>(req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">password</span>);\n\n  <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> prisma.<span class=\"hljs-property\">user</span>.<span class=\"hljs-title function_\">create</span>({\n    <span class=\"hljs-attr\">data</span>: {\n      <span class=\"hljs-attr\">username</span>: req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">username</span>,\n      <span class=\"hljs-attr\">password</span>: hash,\n    },\n  });\n\n  <span class=\"hljs-keyword\">const</span> token = <span class=\"hljs-title function_\">createJWT</span>(user);\n  res.<span class=\"hljs-title function_\">json</span>({ token });\n};\n</code></pre>\n<p>First thing here is the prisma import. I&#39;m creating module that exports a Prisma client so we don&#39;t have to keep creating a new client every time we need it.\n<br>\nThere isn&#39;t anything special going on here other than creating a new user then using that user to create a JWT and sending that token back as a response.\n<br>\nNext, we need to allow a user to sign in.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">signin</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">req, res</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> prisma.<span class=\"hljs-property\">user</span>.<span class=\"hljs-title function_\">findUnique</span>({\n    <span class=\"hljs-attr\">where</span>: { <span class=\"hljs-attr\">username</span>: req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">username</span> },\n  });\n\n  <span class=\"hljs-keyword\">const</span> isValid = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">comparePasswords</span>(req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">password</span>, user.<span class=\"hljs-property\">password</span>);\n\n  <span class=\"hljs-keyword\">if</span> (!isValid) {\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">401</span>);\n    res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">&quot;Invalid username or password&quot;</span>);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  <span class=\"hljs-keyword\">const</span> token = <span class=\"hljs-title function_\">createJWT</span>(user);\n  res.<span class=\"hljs-title function_\">json</span>({ token });\n};\n</code></pre>\n<p>Using the provided username, we search for a matching user. We&#39;ll get more into how to query with Prisma soon. Then we compare passwords. If it&#39;s a match, we create a JWT and send it back.</p>\n<br>\nNow we need to create some routes and add these handlers. We can do this in `src/server.ts`\n\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { createNewUser, signin } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./handlers/user&quot;</span>;\n\napp.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&quot;/user&quot;</span>, createNewUser);\napp.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&quot;/signin&quot;</span>, signin);\n</code></pre>\n","slug":"users","title":"Users","section":"Auth","icon":"lock","filePath":"/home/runner/work/API-design-v4/API-design-v4/lessons/07-auth/B-users.md","nextSlug":"/API-design-v4/lessons/route-handlers/validating-inputs","prevSlug":"/API-design-v4/lessons/auth/auth-middleware"}},"__N_SSG":true}