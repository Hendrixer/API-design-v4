{"pageProps":{"post":{"attributes":{"title":"Vanilla API","description":"Build a vanilla, no framework used, API in node.js"},"html":"<h2 id=\"playing-on-hard-mode\">Playing on hard mode</h2>\n<p>Node.js comes with everything you need to build a fully functional API. However, it&#39;s very tedious and unwise to use the raw modules. For context and appreciation of frameworks, let&#39;s do it anyway!</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> http <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;http&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> server = http.<span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (req.<span class=\"hljs-property\">url</span> === <span class=\"hljs-string\">&quot;/&quot;</span> &amp;&amp; req.<span class=\"hljs-property\">method</span> === <span class=\"hljs-string\">&quot;GET&quot;</span>) {\n    res.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">200</span>, { <span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span> });\n    res.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&quot;hello&quot;</span> }));\n\n    res.<span class=\"hljs-title function_\">end</span>();\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  res.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">404</span>, { <span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span> });\n  res.<span class=\"hljs-title function_\">end</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&quot;nope&quot;</span> }));\n});\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PORT</span> = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span>;\n\nserver.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-variable constant_\">PORT</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`server on <span class=\"hljs-subst\">${PORT}</span>`</span>);\n});\n</code></pre>\n<p>... and just like that, we have an API. It doesn&#39;t do much functionally, but it works. A client can issue a <code>GET</code> request to the server at <code>/</code> and get back some JSON. Any other request will yield a different message and a <code>404</code> status code. We&#39;ll talk about HTTP Methods, status codes, and routes later in the course.</p>\n<h2 id=\"why-this-breaks-down\">Why this breaks down</h2>\n<p>When building something trivial like our example, then not using a framework is fine. Maybe even preferred. But you&#39;ll have to start creating your abstractions as soon as you build anything. Why create your own when a framework is just that: Abstractions based on some opinions that benefit from having community support.</p>\n","slug":"vanilla-server","title":"Vanilla API","section":"API basics in Node.js","icon":"cloud","filePath":"/home/runner/work/API-design-v4/API-design-v4/lessons/02-api-basics-in-node/A-vanilla-server.md","nextSlug":"/API-design-v4/lessons/api-basics-in-node/api-anatomy","prevSlug":"/API-design-v4/lessons/start-here/what-we-are-building"}},"__N_SSG":true}