{"pageProps":{"post":{"attributes":{"description":"Input validation for express requests"},"html":"<p>Never trust the user! Words to live by when working with user input. Especially more true for an API that is responsible for holding the weight of every client. The last thing you want is for a user&#39;s input choice to crash your entire server. We want to get ahead of that and validate all incoming data for our API.\n<br>\nSo what does input validation look like? We&#39;ll be using a package to help us do that.\n<br>\n<code>npm i express-validator --save</code>\n<br>\nFor any route, you want to add input validations:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { body, validationResult } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;express-validator&quot;</span>;\n\napp.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&quot;/product&quot;</span>, <span class=\"hljs-title function_\">body</span>(<span class=\"hljs-string\">&quot;name&quot;</span>).<span class=\"hljs-title function_\">isString</span>(), <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> errors = <span class=\"hljs-title function_\">validationResult</span>(req);\n\n  <span class=\"hljs-keyword\">if</span> (!errors.<span class=\"hljs-title function_\">isEmpty</span>()) {\n    res.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">400</span>);\n    res.<span class=\"hljs-title function_\">json</span>({ <span class=\"hljs-attr\">errors</span>: errors.<span class=\"hljs-title function_\">array</span>() });\n  }\n});\n</code></pre>\n<p>We can use the provided middleware to create new validations against any user input. This includes the body, headers, cookies, params, and query string. In this example, we&#39;re validating that the request includes a <code>name</code> field on the body.\n<br>\nLet&#39;s apply input validations to all our <code>put</code> and <code>post</code> requests.</p>\n","slug":"validating-inputs","title":"Validating Inputs","section":"Route Handlers","icon":"hand-sparkles","filePath":"/home/runner/work/API-design-v4/API-design-v4/lessons/08-route-handlers/A-validating-inputs.md","nextSlug":"/API-design-v4/lessons/route-handlers/handlers","prevSlug":"/API-design-v4/lessons/auth/users"}},"__N_SSG":true}