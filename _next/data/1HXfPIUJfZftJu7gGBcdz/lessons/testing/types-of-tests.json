{"pageProps":{"post":{"attributes":{},"html":"<h2 id=\"unit-test\">Unit test</h2>\n<p>A unit test is all about testing individual pieces of logic independently of each other. You have to make sure you write your code in a way that can be unit tested.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// not testable</span>\n<span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-number\">100</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">action</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value);\n};\n<span class=\"hljs-string\">``</span>;\n</code></pre>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// testable</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">action</span> = (<span class=\"hljs-params\">value</span>) =&gt; {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value);\n};\n</code></pre>\n<p>Using arguments vs creating closures and exporting your code are all great patterns to use when creating testable code. Now what does a unit test look like?</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;user handler&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;should do a thing&quot;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n    <span class=\"hljs-comment\">// .,...</span>\n\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-string\">&quot;something&quot;</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&quot;something&quot;</span>);\n  });\n});\n</code></pre>\n<p>This is how you might write a unit test in Jest. Each <code>it</code> block is an actual test where you usually call some function you want to test, and then create some assertion about what its return value should be. The <code>describe</code> function is just for organizing your test.</p>\n<h2 id=\"integraion-test\">Integraion test</h2>\n<p>Integration tests will test how an entire route works by actually making a request to observe what the API sent back and making assertions on that result. We can use jest along with supertest to run integration test.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> app <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../server&quot;</span>;\n<span class=\"hljs-keyword\">import</span> request <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;supertest&quot;</span>;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;POST /user&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;responds with json&quot;</span>, <span class=\"hljs-keyword\">async</span> () {\n    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">request</span>(app)\n      .<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&quot;/user&quot;</span>)\n      .<span class=\"hljs-title function_\">send</span>({ <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">&quot;hello&quot;</span>, <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&quot;hola&quot;</span> })\n      .<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&quot;Accept&quot;</span>, <span class=\"hljs-string\">&quot;application/json&quot;</span>)\n\n    <span class=\"hljs-title function_\">expect</span>(res.<span class=\"hljs-property\">headers</span>[<span class=\"hljs-string\">&quot;Content-Type&quot;</span>]).<span class=\"hljs-title function_\">toMatch</span>(<span class=\"hljs-regexp\">/json/</span>);\n    <span class=\"hljs-title function_\">expect</span>(res.<span class=\"hljs-property\">status</span>).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-number\">200</span>);\n  });\n});\n</code></pre>\n<p>In this test, we&#39;re using the <code>request</code> from supertest to make a request to <code>POST /user</code>, which in our app creates a user. We&#39;re sending up the required payload and expect to get a successful 200 when its done.\n<br>\n<br>\nNow, go write some tests!</p>\n","slug":"types-of-tests","title":"Types of Tests","section":"Testing","icon":"flask","filePath":"/home/runner/work/API-design-v4/API-design-v4/lessons/12-testing/B-types-of-tests.md","nextSlug":"/API-design-v4/lessons/deployment-and-next-steps/deploying","prevSlug":"/API-design-v4/lessons/testing/setting-up-test"}},"__N_SSG":true}